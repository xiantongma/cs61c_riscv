$date
	Sat Dec 16 11:37:17 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rstb $end
$scope module riscv $end
$var wire 32 # ExMem_AluB_Pc4 [31:0] $end
$var wire 32 $ ExMem_AluResult [31:0] $end
$var wire 1 % ExMem_MemRead $end
$var wire 1 & ExMem_MemToReg $end
$var wire 1 ' ExMem_MemWrite $end
$var wire 5 ( ExMem_RegRd [4:0] $end
$var wire 1 ) ExMem_RegWrite $end
$var wire 32 * Ex_AluResult [31:0] $end
$var wire 1 + Ex_IdExFlush $end
$var wire 1 , Ex_IfFlush $end
$var wire 1 - Ex_PcSel $end
$var wire 1 . IdEx_AluB_Pc4_Sel $end
$var wire 4 / IdEx_AluOp [3:0] $end
$var wire 1 0 IdEx_AluSrc $end
$var wire 1 1 IdEx_Branch $end
$var wire 32 2 IdEx_Imm [31:0] $end
$var wire 1 3 IdEx_MemRead $end
$var wire 1 4 IdEx_MemToReg $end
$var wire 1 5 IdEx_MemWrite $end
$var wire 32 6 IdEx_Pc [31:0] $end
$var wire 1 7 IdEx_PcSrc $end
$var wire 32 8 IdEx_RegDataA [31:0] $end
$var wire 32 9 IdEx_RegDataB [31:0] $end
$var wire 5 : IdEx_RegRd [4:0] $end
$var wire 5 ; IdEx_RegRs1 [4:0] $end
$var wire 5 < IdEx_RegRs2 [4:0] $end
$var wire 1 = IdEx_RegWrite $end
$var wire 1 > Id_IfIdWrite $end
$var wire 1 ? Id_PcWrite $end
$var wire 32 @ IfId_Inst [31:0] $end
$var wire 32 A IfId_Pc [31:0] $end
$var wire 32 B MemWb_AluB_Pc4 [31:0] $end
$var wire 32 C MemWb_MemRData [31:0] $end
$var wire 1 D MemWb_MemToReg $end
$var wire 5 E MemWb_RegRd [4:0] $end
$var wire 1 F MemWb_RegWrite $end
$var wire 32 G Wb_RegWData [31:0] $end
$var wire 1 H clk $end
$var wire 1 I rstb $end
$scope module instFetch $end
$var wire 32 J AluResult [31:0] $end
$var wire 1 , Flush $end
$var wire 1 ? Id_PcWrite $end
$var wire 32 K Inst [31:0] $end
$var wire 1 - PcSel $end
$var wire 1 H clk $end
$var wire 1 L iPcAdd4 $end
$var wire 1 I rstb $end
$var reg 32 M IfId_Inst [31:0] $end
$var reg 32 N IfId_Pc [31:0] $end
$var reg 32 O Pc [31:0] $end
$var reg 32 P next_Pc [31:0] $end
$scope module imem $end
$var wire 32 Q addr [31:0] $end
$var wire 32 R data [31:0] $end
$upscope $end
$upscope $end
$scope module id $end
$var wire 1 S AluB_Pc4_Sel $end
$var wire 4 T AluOp [3:0] $end
$var wire 1 U AluSrc $end
$var wire 1 V Branch $end
$var wire 1 + Ex_IdExFlush $end
$var wire 1 W IdExSel $end
$var wire 1 > Id_IfIdWrite $end
$var wire 1 ? Id_PcWrite $end
$var wire 32 X IfId_Inst [31:0] $end
$var wire 32 Y IfId_Pc [31:0] $end
$var wire 32 Z Imm [31:0] $end
$var wire 3 [ InstFormat [2:0] $end
$var wire 1 \ InstUndef $end
$var wire 1 ] MemRead $end
$var wire 1 ^ MemToReg $end
$var wire 5 _ MemWb_RegRd [4:0] $end
$var wire 1 F MemWb_RegWrite $end
$var wire 1 ` MemWrite $end
$var wire 1 a PcSrc $end
$var wire 32 b RegDataA [31:0] $end
$var wire 32 c RegDataB [31:0] $end
$var wire 5 d RegRd [4:0] $end
$var wire 5 e RegRs1 [4:0] $end
$var wire 1 f RegRs1Read $end
$var wire 5 g RegRs2 [4:0] $end
$var wire 1 h RegRs2Read $end
$var wire 1 i RegWrite $end
$var wire 32 j Wb_RegWData [31:0] $end
$var wire 1 H clk $end
$var wire 1 I rstb $end
$var reg 1 k IdEx_AluB_Pc4_Sel $end
$var reg 4 l IdEx_AluOp [3:0] $end
$var reg 1 m IdEx_AluSrc $end
$var reg 1 n IdEx_Branch $end
$var reg 32 o IdEx_Imm [31:0] $end
$var reg 1 p IdEx_MemRead $end
$var reg 1 q IdEx_MemToReg $end
$var reg 1 r IdEx_MemWrite $end
$var reg 32 s IdEx_Pc [31:0] $end
$var reg 1 t IdEx_PcSrc $end
$var reg 32 u IdEx_RegDataA [31:0] $end
$var reg 32 v IdEx_RegDataB [31:0] $end
$var reg 5 w IdEx_RegRd [4:0] $end
$var reg 1 x IdEx_RegWrite $end
$scope module hazardDetectionUnit $end
$var wire 1 W IdExSel $end
$var wire 1 3 IdEx_MemRead $end
$var wire 5 y IdEx_RegRd [4:0] $end
$var wire 1 z IdEx_RegRs1 $end
$var wire 1 { IdEx_RegRs2 $end
$var wire 1 > IfIdWrite $end
$var wire 5 | IfId_RegRs1 [4:0] $end
$var wire 5 } IfId_RegRs2 [4:0] $end
$var wire 1 ? PcWrite $end
$var wire 1 ~ stall $end
$upscope $end
$scope module id_decode $end
$var wire 3 !" Funct3 [2:0] $end
$var wire 7 "" Funct7 [6:0] $end
$var wire 32 #" Inst [31:0] $end
$var wire 7 $" OpCode [6:0] $end
$var wire 5 %" Rd [4:0] $end
$var wire 5 &" Rs1 [4:0] $end
$var wire 5 '" Rs2 [4:0] $end
$var reg 1 (" AluB_Pc4_Sel $end
$var reg 4 )" AluOp [3:0] $end
$var reg 1 *" AluSrc $end
$var reg 1 +" Branch $end
$var reg 3 ," InstFormat [2:0] $end
$var reg 1 -" InstUndef $end
$var reg 1 ." MemRead $end
$var reg 1 /" MemToReg $end
$var reg 1 0" MemWrite $end
$var reg 1 1" PcSrc $end
$var reg 1 2" RegRs1Read $end
$var reg 1 3" RegRs2Read $end
$var reg 1 4" RegWrite $end
$upscope $end
$scope module regfiles $end
$var wire 5 5" addrRd [4:0] $end
$var wire 5 6" addra [4:0] $end
$var wire 5 7" addrb [4:0] $end
$var wire 1 H clk $end
$var wire 32 8" dataa [31:0] $end
$var wire 32 9" datab [31:0] $end
$var wire 1 I rstb $end
$var wire 32 :" wData [31:0] $end
$var wire 1 F write $end
$var integer 32 ;" i [31:0] $end
$upscope $end
$scope module ImmGen $end
$var wire 32 <" Inst [31:0] $end
$var wire 3 =" InstFormat [2:0] $end
$var reg 32 >" Imm [31:0] $end
$upscope $end
$upscope $end
$scope module exe $end
$var wire 2 ?" ForwardA [1:0] $end
$var wire 2 @" ForwardB [1:0] $end
$var wire 1 . IdEx_AluB_Pc4_Sel $end
$var wire 4 A" IdEx_AluOp [3:0] $end
$var wire 1 0 IdEx_AluSrc $end
$var wire 32 B" IdEx_Imm [31:0] $end
$var wire 1 3 IdEx_MemRead $end
$var wire 1 4 IdEx_MemToReg $end
$var wire 1 5 IdEx_MemWrite $end
$var wire 32 C" IdEx_Pc [31:0] $end
$var wire 32 D" IdEx_RegDataA [31:0] $end
$var wire 32 E" IdEx_RegDataB [31:0] $end
$var wire 5 F" IdEx_RegRd [4:0] $end
$var wire 5 G" IdEx_RegRs1 [4:0] $end
$var wire 5 H" IdEx_RegRs2 [4:0] $end
$var wire 1 = IdEx_RegWrite $end
$var wire 5 I" MemWb_RegRd [4:0] $end
$var wire 1 F MemWb_RegWrite $end
$var wire 32 J" Wb_RegWData [31:0] $end
$var wire 1 H clk $end
$var wire 32 K" iAluB_Pc4 [31:0] $end
$var wire 32 L" iAluResult [31:0] $end
$var wire 32 M" iPcAdd4 [31:0] $end
$var wire 1 I rstb $end
$var reg 32 N" AluA [31:0] $end
$var reg 32 O" AluB [31:0] $end
$var reg 32 P" ExMem_AluB_Pc4 [31:0] $end
$var reg 32 Q" ExMem_AluResult [31:0] $end
$var reg 1 R" ExMem_MemRead $end
$var reg 1 S" ExMem_MemToReg $end
$var reg 1 T" ExMem_MemWrite $end
$var reg 5 U" ExMem_RegRd [4:0] $end
$var reg 1 V" ExMem_RegWrite $end
$scope module alu $end
$var wire 32 W" alu_a [31:0] $end
$var wire 32 X" alu_b [31:0] $end
$var wire 4 Y" aluop [3:0] $end
$var reg 32 Z" alu_result [31:0] $end
$upscope $end
$scope module forward_unit $end
$var wire 5 [" ExMem_RegRd [4:0] $end
$var wire 1 ) ExMem_RegWrite $end
$var wire 1 \" ForwardA_ExMemForward $end
$var wire 1 ]" ForwardA_MemWBForward $end
$var wire 1 ^" ForwardB_ExMemForward $end
$var wire 1 _" ForwardB_MemWBForward $end
$var wire 5 `" IdEx_RegRs1 [4:0] $end
$var wire 5 a" IdEx_RegRs2 [4:0] $end
$var wire 5 b" MemWb_RegRd [4:0] $end
$var wire 1 F MemWb_RegWrite $end
$var reg 2 c" ForwardA [1:0] $end
$var reg 2 d" ForwardB [1:0] $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 e" ExMem_AluB_Pc4 [31:0] $end
$var wire 32 f" ExMem_AluResult [31:0] $end
$var wire 1 g" ExMem_MemRead $end
$var wire 1 & ExMem_MemToReg $end
$var wire 1 h" ExMem_MemWrite $end
$var wire 5 i" ExMem_RegRd [4:0] $end
$var wire 1 ) ExMem_RegWrite $end
$var wire 32 j" MemRData [31:0] $end
$var wire 1 H clk $end
$var wire 1 I rstb $end
$var reg 32 k" MemWb_AluB_Pc4 [31:0] $end
$var reg 32 l" MemWb_MemRData [31:0] $end
$var reg 1 m" MemWb_MemToReg $end
$var reg 5 n" MemWb_RegRd [4:0] $end
$var reg 1 o" MemWb_RegWrite $end
$scope module dram $end
$var wire 32 p" addr [31:0] $end
$var wire 1 H clk $end
$var wire 32 q" rdata [31:0] $end
$var wire 1 g" read $end
$var wire 1 I rstb $end
$var wire 32 r" wdata [31:0] $end
$var wire 1 h" write $end
$upscope $end
$upscope $end
$scope module wb $end
$var wire 32 s" MemWb_AluB_Pc4 [31:0] $end
$var wire 32 t" MemWb_MemRData [31:0] $end
$var wire 1 D MemWb_MemToReg $end
$var reg 32 u" Wb_RegData [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 u"
b0 t"
b0 s"
b0 r"
bx q"
b0 p"
0o"
b0 n"
0m"
b0 l"
b0 k"
bx j"
b0 i"
zh"
zg"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
bz a"
bz `"
0_"
0^"
0]"
0\"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
0V"
b0 U"
0T"
0S"
0R"
b0 Q"
b0 P"
b0 O"
b0 N"
b100 M"
b0 L"
b100 K"
b0 J"
b0 I"
bz H"
bz G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
bx >"
bx ="
b0 <"
b100000 ;"
bz :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
04"
03"
02"
01"
00"
0/"
0."
0-"
bx ,"
0+"
0*"
b0 )"
0("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
0~
b0 }
b0 |
z{
zz
b0 y
0x
b0 w
b0 v
b0 u
0t
b0 s
0r
0q
0p
b0 o
0n
0m
b0 l
0k
bz j
0i
0h
b0 g
0f
b0 e
b0 d
b0 c
b0 b
0a
0`
b0 _
0^
0]
0\
bx [
bx Z
b0 Y
b0 X
0W
0V
0U
b0 T
0S
bx R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
bx K
bz J
0I
0H
b0 G
0F
b0 E
0D
b0 C
b0 B
b0 A
b0 @
1?
1>
0=
bz <
bz ;
b0 :
b0 9
b0 8
07
b0 6
05
04
03
b0 2
01
00
b0 /
0.
z-
z,
z+
bz *
0)
b0 (
0'
0&
0%
b0 $
b0 #
0"
0!
$end
#5
b100000 ;"
1!
1H
#10
0!
0H
#15
b100000 ;"
1!
1H
#20
0!
0H
#25
b100000 ;"
1!
1H
#30
0!
0H
#33
1"
1I
#35
bx b
bx 8"
bx c
bx 9"
bx Z"
bx L"
bx $"
bx d
bx %"
bx !"
bx e
bx |
bx &"
bx 6"
bx g
bx }
bx '"
bx 7"
bx ""
bx O"
bx X"
bx M
bx @
bx X
bx #"
bx <"
bx o
bx 2
bx B"
b100 P"
b100 #
b100 e"
b100 r"
bx l"
bx C
bx t"
1!
1H
#40
0!
0H
#45
b100 u"
b100 G
b100 J"
bx N"
bx W"
b100 k"
b100 B
b100 s"
bx Q"
bx $
bx f"
bx p"
bx v
bx 9
bx E"
bx u
bx 8
bx D"
bx w
bx :
bx y
bx F"
1!
1H
#50
0!
0H
#55
bx U"
bx (
bx ["
bx i"
1!
1H
#60
0!
0H
#65
bx n"
bx E
bx _
bx 5"
bx I"
bx b"
1!
1H
#70
0!
0H
#75
1!
1H
#80
0!
0H
#85
1!
1H
#90
0!
0H
#95
1!
1H
#100
0!
0H
#105
1!
1H
#110
0!
0H
#115
1!
1H
#120
0!
0H
#125
1!
1H
#130
0!
0H
#135
1!
1H
#140
0!
0H
#145
1!
1H
#150
0!
0H
#155
1!
1H
#160
0!
0H
#165
1!
1H
#170
0!
0H
#175
1!
1H
#180
0!
0H
#185
1!
1H
#190
0!
0H
#195
1!
1H
#200
0!
0H
#205
1!
1H
#210
0!
0H
#215
1!
1H
#220
0!
0H
#225
1!
1H
#230
0!
0H
#235
1!
1H
#240
0!
0H
#245
1!
1H
#250
0!
0H
#255
1!
1H
#260
0!
0H
#265
1!
1H
#270
0!
0H
#275
1!
1H
#280
0!
0H
#285
1!
1H
#290
0!
0H
#295
1!
1H
#300
0!
0H
#305
1!
1H
#310
0!
0H
#315
1!
1H
#320
0!
0H
#325
1!
1H
#330
0!
0H
#335
1!
1H
#340
0!
0H
#345
1!
1H
#350
0!
0H
#355
1!
1H
#360
0!
0H
#365
1!
1H
#370
0!
0H
#375
1!
1H
#380
0!
0H
#385
1!
1H
#390
0!
0H
#395
1!
1H
#400
0!
0H
#405
1!
1H
#410
0!
0H
#415
1!
1H
#420
0!
0H
#425
1!
1H
#430
0!
0H
#435
1!
1H
#440
0!
0H
#445
1!
1H
#450
0!
0H
#455
1!
1H
#460
0!
0H
#465
1!
1H
#470
0!
0H
#475
1!
1H
#480
0!
0H
#485
1!
1H
#490
0!
0H
#495
1!
1H
#500
0!
0H
#505
1!
1H
#510
0!
0H
#515
1!
1H
#520
0!
0H
#525
1!
1H
#530
0!
0H
#535
1!
1H
#540
0!
0H
#545
1!
1H
#550
0!
0H
#555
1!
1H
#560
0!
0H
#565
1!
1H
#570
0!
0H
#575
1!
1H
#580
0!
0H
#585
1!
1H
#590
0!
0H
#595
1!
1H
#600
0!
0H
#605
1!
1H
#610
0!
0H
#615
1!
1H
#620
0!
0H
#625
1!
1H
#630
0!
0H
#635
1!
1H
#640
0!
0H
#645
1!
1H
#650
0!
0H
#655
1!
1H
#660
0!
0H
#665
1!
1H
#670
0!
0H
#675
1!
1H
#680
0!
0H
#685
1!
1H
#690
0!
0H
#695
1!
1H
#700
0!
0H
#705
1!
1H
#710
0!
0H
#715
1!
1H
#720
0!
0H
#725
1!
1H
#730
0!
0H
#735
1!
1H
#740
0!
0H
#745
1!
1H
#750
0!
0H
#755
1!
1H
#760
0!
0H
#765
1!
1H
#770
0!
0H
#775
1!
1H
#780
0!
0H
#785
1!
1H
#790
0!
0H
#795
1!
1H
#800
0!
0H
#805
1!
1H
#810
0!
0H
#815
1!
1H
#820
0!
0H
#825
1!
1H
#830
0!
0H
#835
1!
1H
#840
0!
0H
#845
1!
1H
#850
0!
0H
#855
1!
1H
#860
0!
0H
#865
1!
1H
#870
0!
0H
#875
1!
1H
#880
0!
0H
#885
1!
1H
#890
0!
0H
#895
1!
1H
#900
0!
0H
#905
1!
1H
#910
0!
0H
#915
1!
1H
#920
0!
0H
#925
1!
1H
#930
0!
0H
#935
1!
1H
#940
0!
0H
#945
1!
1H
#950
0!
0H
#955
1!
1H
#960
0!
0H
#965
1!
1H
#970
0!
0H
#975
1!
1H
#980
0!
0H
#985
1!
1H
#990
0!
0H
#995
1!
1H
#1000
0!
0H
#1005
1!
1H
#1010
0!
0H
#1015
1!
1H
#1020
0!
0H
#1025
1!
1H
#1030
0!
0H
#1033
